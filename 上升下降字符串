给你一个字符串 s ，请你根据下面的算法重新构造字符串：


	从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。
	从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。
	重复步骤 2 ，直到你没法从 s 中选择字符。
	从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。
	从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。
	重复步骤 5 ，直到你没法从 s 中选择字符。
	重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。


在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。

请你返回将 s 中字符重新排序后的 结果字符串 。

来源：力扣（LeetCode）
思路：桶记法
#include<stdio.h>
int main(void)
{
	char s[10000],x[26]={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	int h[26]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},i,k,n=0;
	printf("input string:\n");
	gets(s);
	i=0;
	while(s[i]!='\0')
	{
	  n++;
	  i++;
    }
	i=0; 
	while(s[i]!='\0')
	{
		switch(s[i])
		{
		case 'a':h[0]++;break;
		case 'b':h[1]++;break;
		case 'c':h[2]++;break;
		case 'd':h[3]++;break;
		case 'e':h[4]++;break;
		case 'f':h[5]++;break;
		case 'g':h[6]++;break;
		case 'h':h[7]++;break;
		case 'i':h[8]++;break;
		case 'j':h[9]++;break;
		case 'k':h[10]++;break;
		case 'l':h[11]++;break;
		case 'm':h[12]++;break;
		case 'n':h[13]++;break;
		case 'o':h[14]++;break;
		case 'p':h[15]++;break;
		case 'q':h[16]++;break;
		case 'r':h[17]++;break;
		case 's':h[18]++;break;
		case 't':h[19]++;break;
		case 'u':h[20]++;break;
		case 'v':h[21]++;break;
		case 'w':h[22]++;break;
		case 'x':h[23]++;break;
		case 'y':h[24]++;break;
		case 'z':h[25]++;break;
	    }
		i++;
	}
	for(k=0;k<n;k++)
	{
	 for(i=0;i<26;i++)
	 {
		if(h[i]!=0)
		{
		 printf("%c",x[i]);
		 h[i]--;
	    }
	 }
	 for(i=25;i>=0;i--)
	 {
	 	if(h[i]!=0)
	 	 {
	 	 	printf("%c",x[i]);
	 	 	h[i]--;
		 }
	 }
	 
    }
    return 0;
} 
